function Model2XmlFormatter(a, t) {
    const n = new X2JS({
        escapeMode: t
    });
    let e = null,
        o = t ? function(a) {
            return a.innerHTML
        } : function(a) {
            let t = a.innerHTML;
            return $("img", a).each((a, n) => {
                const e = n.outerHTML;
                t = t.replace(e, "<image>" + e + "</img></image>")
            }), $("span.ql-formula", a).each((a, n) => {
                const e = n.outerHTML;
                t = t.replace(e, "<formula>" + e + "</formula>")
            }), t
        },
        s = function(a) {
            let t = {
                Basic: o(a.basic.root)
            };
            if (a.info) {
                let n = {
                    _type: "More",
                    Paragraph: []
                };
                a.info.paragraphs && a.info.paragraphs.length > 0 && a.info.paragraphs.forEach(a => {
                    n.Paragraph.push(s(a))
                }), t.Extension || (t.Extension = []), t.Extension.push(n)
            }
            if (a.flask) {
                let n = {
                    _type: "Example",
                    Paragraph: []
                };
                a.flask.paragraphs && a.flask.paragraphs.length > 0 && a.flask.paragraphs.forEach(a => {
                    n.Paragraph.push(s(a))
                }), t.Extension || (t.Extension = []), t.Extension.push(n)
            }
            if (a.anchor) {
                let n = {
                    _type: "Cite",
                    Paragraph: []
                };
                a.anchor.paragraphs && a.anchor.paragraphs.length > 0 && a.anchor.paragraphs.forEach(a => {
                    n.Paragraph.push(s(a))
                }), t.Extension || (t.Extension = []), t.Extension.push(n)
            }
            return t
        },
        r = function(a) {
            let t = {
                Question: o(a.question.root),
                Options: {
                    Option: []
                }
            };
            return a.options.forEach(a => {
                t.Options.Option.push(o(a.text.root))
            }), a.answer && (t.Answer = parseInt(a.answer.text.root.innerText)), a.comment && (t.Comment = o(a.comment.text.root)), t
        };
    return {
        xml: function() {
            return e || (e = '<?xml version="1.0" encoding="utf-8"?>\n<?xml-stylesheet type="text/xsl" href="ExtEss/ExtEss.xsl"?>\n' + n.json2xml_str(function() {
                let t = {
                    Essay: {
                        Title: a.title,
                        Parts: {
                            Part: []
                        }
                    }
                };
                return a.parts.forEach((a, n) => {
                    let e = {
                        Number: n + 1
                    };
                    a.paragraphs && a.paragraphs.length > 0 && (e.Paragraph = [], a.paragraphs.forEach(a => {
                        e.Paragraph.push(s(a))
                    })), a.tasks && a.tasks.length > 0 && (e.Tasks = {
                        Task: []
                    }, a.tasks.forEach(a => {
                        e.Tasks.Task.push(r(a))
                    })), t.Essay.Parts.Part.push(e)
                }), t
            }())), e
        }
    }
}

function App(a) {
    const t = new X2JS({
            escapeMode: !0
        }),
        n = this,
        e = {
            container: [
                ["bold", "italic", "underline", "strike", "image", "formula"]
            ]
        };
    this.rootNode = $(a), this.content = {
        title: "",
        parts: []
    }, this.parts = $("<table/>", {
        id: "tbl-parts"
    }).addClass("tbl-parts"), this.controls = $("<table/>", {
        id: "controls"
    }).addClass("controls"), this.controls.append($("<tr/>").append([$("<td/>").append([$("<button></button>", {
        id: "btn-add-part"
    }).text("Добавить часть").on("click", function() {
        n.addPart(n.parts)
    }), $("<button></button>", {
        id: "btn-new"
    }).text("Новый файл").on("click", function() {
        document.location.reload(!0)
    }), $("<button></button>", {
        id: "btn-export-xml"
    }).text("Экспорт XML (редакт)").on("click", function() {
        let a = new Model2XmlFormatter(n.content, !0),
            t = document.createElement("a");
        t.download = "document.xml", t.href = URL.createObjectURL(new File([a.xml()], "document.xml", {
            type: "text/xml"
        })), t.click()
    }), $("<button></button>", {
        id: "btn-export-xsltxml"
    }).text("Экспорт XML (для XSLT)").on("click", function() {
        let a = new Model2XmlFormatter(n.content, !1),
            t = document.createElement("a");
        t.download = "document.xslt.xml", t.href = URL.createObjectURL(new File([a.xml()], "document.xslt.xml", {
            type: "text/xml"
        })), t.click()
    }), $("<input/>", {
        id: "btn-import-xml",
        type: "file"
    }).text("Импорт XML").on("change", function() {
        if (0 === this.files.length) return;
        let a = new FileReader;
        a.onload = function(a) {
            let e = a.target.result || "",
                o = e.indexOf("<Essay>");
            if (o < 0) return;
            const s = t.xml_str2json(e.substr(o));
            if (console.log(s), n.content.title = s.Essay.title || "", n.content.parts.forEach(a => {
                    $("#" + a.id).remove()
                }), n.content.parts = [], s.Essay.Parts.Part) {
                ("length" in s.Essay.Parts.Part ? s.Essay.Parts.Part : [s.Essay.Parts.Part]).forEach(a => n.addPart({
                    content: a
                }))
            }
        }, a.readAsText(this.files[0])
    })]), $("<td/>").append([$("<div/>", {
        style: "text-align: right; color: #cecece; font-size: 0.8em",
        text: "1.0.1904.7"
    })])])), this.rootNode.append(this.controls), this.rootNode.append(this.parts), this.generateId = function() {
        const a = window.crypto || window.msCrypto;
        return "xxxxxxxx-xxxx-4xxx-8xxx-xxxxxxxxxxxx".replace(/x/g, function() {
            if (a && a.getRandomValues) {
                let t = new Uint8Array(1);
                return a.getRandomValues(t), (t[0] % 16).toString(16)
            }
            return (16 * Math.random() | 0).toString(16)
        })
    }, this.addPart = function(a) {
        let t = {
            id: this.generateId(),
            paragraphs: [],
            tasks: []
        };
        this.content.parts.push(t);
        let n = this,
            e = $("<table/>").addClass("tbl-paragraphs"),
            o = $("<tr/>", {
                id: t.id
            }).addClass("part").append([$("<td/>").addClass("nav-col").append([$("<button/>", {
                title: "Удалить этот блок"
            }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
                o.remove(), n.content.parts = n.content.parts.filter(a => a.id !== t.id)
            }), $("<button></button>", {
                id: "btn-add-paragraph",
                title: "Добавить параграф"
            }).html('<i class="fa fa-paragraph" aria-hidden="true"></i>').on("click", function() {
                let a = n.addBlock(e, {
                    controls: ["info", "flask", "anchor"],
                    rowClass: "paragraph",
                    icon: "fa-paragraph",
                    removeCallback: function(a) {
                        t.paragraphs = t.paragraphs.filter(t => t.id !== a.id)
                    }
                });
                t.paragraphs.push(a)
            }), $("<button/>", {
                title: "Добавить задания"
            }).html('<i class="fa fa-question" aria-hidden="true"></i>').on("click", function() {
                let a = n.addTasksBlock(e, {
                    controls: [],
                    rowClass: "anchor-tasks",
                    icon: "fa-question",
                    removeCallback: function(a) {
                        t.tasks = t.tasks.filter(t => t.id !== a.id)
                    }
                });
                t.tasks.push(a)
            })]), $("<td/>").append([e])]);
        if (this.parts.append(o), a && a.content) {
            if (a.content.Paragraph) {
                ("length" in a.content.Paragraph ? a.content.Paragraph : [a.content.Paragraph]).forEach(a => {
                    let n = [];
                    a.Extension && ("length" in a.Extension ? n = a.Extension : n.push(a.Extension));
                    let o = this.addBlock(e, {
                        controls: ["info", "flask", "anchor"],
                        rowClass: "paragraph",
                        icon: "fa-paragraph",
                        content: {
                            basic: a.Basic,
                            extensions: n
                        },
                        removeCallback: function(a) {
                            t.paragraphs = t.paragraphs.filter(t => t.id !== a.id)
                        }
                    });
                    t.paragraphs.push(o)
                })
            }
            if (a.content.Tasks && a.content.Tasks.Task) {
                ("length" in a.content.Tasks.Task ? a.content.Tasks.Task : [a.content.Tasks.Task]).forEach(a => {
                    let o = n.addTasksBlock(e, {
                        controls: [],
                        rowClass: "anchor-tasks",
                        icon: "fa-question",
                        content: a,
                        removeCallback: function(a) {
                            t.tasks = t.tasks.filter(t => t.id !== a.id)
                        }
                    });
                    t.tasks.push(o)
                })
            }
        } else {
            let a = this.addBlock(e, {
                controls: ["info", "flask", "anchor"],
                rowClass: "paragraph",
                icon: "fa-paragraph",
                removeCallback: function(a) {
                    t.paragraphs = t.paragraphs.filter(t => t.id !== a.id)
                }
            });
            t.paragraphs.push(a)
        }
        return t
    }, this.addBlock = function(a, t) {
        let n = {
                id: this.generateId(),
                type: t.rowClass,
                basic: null,
                paragraphs: [],
                info: null,
                flask: null,
                anchor: null
            },
            o = this,
            s = $("<table/>").addClass("tbl-paragraph-content"),
            r = $("<button/>", {
                title: "Добавить параграф"
            }).html('<i class="fa fa-paragraph" aria-hidden="true"></i>').on("click", function() {
                let a = o.addBlock(s, {
                    controls: ["info", "flask", "anchor"],
                    rowClass: "paragraph",
                    icon: "fa-paragraph",
                    removeCallback: function(a) {
                        n.paragraphs = n.paragraphs.filter(t => t.id !== a.id)
                    }
                });
                n.paragraphs.push(a)
            }),
            i = $("<button/>", {
                title: "Сказать подробнее"
            }).html('<i class="fa fa-info" aria-hidden="true"></i>').on("click", function() {
                n.info = o.addBlock(s, {
                    controls: ["paragraph"],
                    rowClass: "info-block",
                    icon: "fa-info",
                    removeCallback: function(a) {
                        i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.info = null
                    }
                }), i.addClass("hidden"), l.addClass("hidden"), c.addClass("hidden")
            }),
            l = $("<button/>", {
                title: "Привести пример"
            }).html('<i class="fa fa-flask" aria-hidden="true"></i>').on("click", function() {
                n.flask = o.addBlock(s, {
                    controls: [],
                    rowClass: "flask-block",
                    icon: "fa-flask",
                    removeCallback: function(a) {
                        i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.flask = null
                    }
                }), i.addClass("hidden"), l.addClass("hidden"), c.addClass("hidden")
            }),
            c = $("<button/>", {
                title: "Где об этом можно прочесть"
            }).html('<i class="fa fa-anchor" aria-hidden="true"></i>').on("click", function() {
                n.anchor = o.addBlock(s, {
                    controls: [],
                    rowClass: "anchor-block",
                    icon: "fa-anchor",
                    removeCallback: function(a) {
                        i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.anchor = null
                    }
                }), i.addClass("hidden"), l.addClass("hidden"), c.addClass("hidden")
            });
        if ("paragraph" !== n.type)
            if (t.content && t.content.paragraphs) t.content.paragraphs.forEach(a => {
                let t = this.addBlock(s, {
                    controls: ["info", "flask", "anchor"],
                    rowClass: "paragraph",
                    icon: "fa-paragraph",
                    content: {
                        basic: a.Basic || a.basic || "",
                        extensions: a.Extension ? "length" in a.Extension ? a.Extension : [a.Extension] : []
                    },
                    removeCallback: function(a) {
                        n.paragraphs = n.paragraphs.filter(t => t.id !== a.id)
                    }
                });
                n.paragraphs.push(t)
            });
            else {
                let a = this.addBlock(s, {
                    controls: ["info", "flask", "anchor"],
                    rowClass: "paragraph",
                    icon: "fa-paragraph",
                    removeCallback: function(a) {
                        n.paragraphs = n.paragraphs.filter(t => t.id !== a.id)
                    }
                });
                n.paragraphs.push(a)
            }
        else {
            let a = $("<div/>", {
                id: "edit_" + n.id,
                class: "component-container"
            });
            t.content && t.content.basic && a.html(t.content.basic), s.append($("<tr/>", {
                class: "basic"
            }).append([$("<td/>", {
                colspan: 2
            }).append(a)])), t.content && t.content.extensions && t.content.extensions.forEach(a => {
                if (a.Paragraph) {
                    let t = "length" in a.Paragraph ? a.Paragraph : [a.Paragraph];
                    "More" === a._type ? n.info = o.addBlock(s, {
                        controls: ["paragraph"],
                        rowClass: "info-block",
                        icon: "fa-info",
                        content: {
                            paragraphs: t
                        },
                        removeCallback: function(a) {
                            i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.info = null
                        }
                    }) : "Example" === a._type ? n.flask = o.addBlock(s, {
                        controls: [],
                        rowClass: "flask-block",
                        icon: "fa-flask",
                        content: {
                            paragraphs: t
                        },
                        removeCallback: function(a) {
                            i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.flask = null
                        }
                    }) : "Cite" === a._type && (n.anchor = o.addBlock(s, {
                        controls: [],
                        rowClass: "anchor-block",
                        icon: "fa-anchor",
                        content: {
                            paragraphs: t
                        },
                        removeCallback: function(a) {
                            i.removeClass("hidden"), l.removeClass("hidden"), c.removeClass("hidden"), n.anchor = null
                        }
                    }))
                }
            })
        }
        let d = [$('<div class="block-info"><i class="fa fa-2x ' + t.icon + '" aria-hidden="true"></i></div>'), $("<button/>", {
            title: "Удалить этот блок"
        }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
            p.remove(), t && t.removeCallback && t.removeCallback(n)
        })];
        (!t.controls || t.controls.indexOf("paragraph") >= 0) && d.push(r), (!t.controls || t.controls.indexOf("info") >= 0) && (d.push(i), n.info && i.addClass("hidden")), (!t.controls || t.controls.indexOf("flask") >= 0) && (d.push(l), n.flask && l.addClass("hidden")), (!t.controls || t.controls.indexOf("anchor") >= 0) && (d.push(c), n.anchor && c.addClass("hidden"));
        let p = $("<tr/>", {
            id: n.id,
            class: t.rowClass
        }).append([$("<td/>", {
            class: "nav-col"
        }).append(d), $("<td/>").append(s)]);
        return a.append(p), "paragraph" === n.type && setTimeout(function() {
            n.basic = new Quill("#edit_" + n.id, {
                theme: "bubble",
                modules: {
                    toolbar: e
                }
            })
        }, 100), n
    }, this.addTasksBlock = function(a, t) {
        let n = this,
            o = {
                id: this.generateId(),
                question: null,
                comment: null,
                answer: null,
                options: []
            },
            s = function(a) {
                let t = {
                        id: n.generateId(),
                        text: null
                    },
                    s = $("<div/>", {
                        id: "edit_" + t.id,
                        class: "component-container"
                    });
                a && a.optionValue && s.html(a.optionValue);
                let r = $("<tr/>", {
                    class: "answer"
                }).append([$("<td/>", {
                    class: "nav-col"
                }).append([$("<button/>", {
                    title: "Удалить"
                }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
                    r.remove(), o.options = o.options.filter(a => a.id !== t.id)
                })]), $("<td/>").append(s)]);
                l.append(r), o.options.push(t), setTimeout(function() {
                    t.text = new Quill("#edit_" + t.id, {
                        theme: "bubble",
                        modules: {
                            toolbar: e
                        }
                    })
                }, 100)
            },
            r = function(a) {
                o.comment = {
                    id: n.generateId(),
                    text: null
                };
                let t = $("<div/>", {
                    id: "edit_" + o.comment.id,
                    class: "component-container"
                });
                a && a.commentValue && t.html(a.commentValue);
                let s = $("<tr/>", {
                    class: "answer"
                }).append([$("<td/>", {
                    class: "nav-col"
                }).append([$("<div/>").append($("<i/>", {
                    class: "fa fa-comment"
                })), $("<button/>", {
                    title: "Удалить"
                }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
                    s.remove(), o.comment = null
                })]), $("<td/>").append(t)]);
                l.append(s), setTimeout(function() {
                    o.comment.text = new Quill("#edit_" + o.comment.id, {
                        theme: "bubble",
                        modules: {
                            toolbar: e
                        }
                    })
                }, 100)
            },
            i = function(a) {
                o.answer = {
                    id: n.generateId(),
                    text: null
                };
                let t = $("<div/>", {
                    id: "edit_" + o.answer.id,
                    class: "component-container"
                });
                a && a.answer && t.html(a.answer);
                let s = $("<tr/>", {
                    class: "answer"
                }).append([$("<td/>", {
                    class: "nav-col"
                }).append([$("<div/>").append($("<i/>", {
                    class: "fa fa-check"
                })), $("<button/>", {
                    title: "Удалить"
                }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
                    s.remove(), o.answer = null
                })]), $("<td/>").append(t)]);
                l.append(s), setTimeout(function() {
                    o.answer.text = new Quill("#edit_" + o.answer.id, {
                        theme: "bubble",
                        modules: {
                            toolbar: e
                        }
                    })
                }, 100)
            },
            l = $("<table/>").addClass("tbl-paragraph-content"),
            c = $("<div/>", {
                id: "edit_" + o.id,
                class: "component-container"
            });
        l.append($("<tr/>").addClass("basic").append([$("<td/>", {
            colspan: 2
        }).append(c)]));
        let d = [$('<div class="block-info"><i class="fa fa-2x ' + t.icon + '" aria-hidden="true"></i></div>'), $("<button/>", {
            title: "Удалить этот блок"
        }).html('<i class="fa fa-trash-o" aria-hidden="true"></i>').on("click", function() {
            p.remove(), t && t.removeCallback && t.removeCallback(o)
        }), $("<button/>", {
            title: "Добавить вариант ответа"
        }).html('<i class="fa fa-check-circle-o" aria-hidden="true"></i>').on("click", s), $("<button/>", {
            title: "Добавить ответ"
        }).html('<i class="fa fa-check" aria-hidden="true"></i>').on("click", i), $("<button/>", {
            title: "Добавить комментарий к ответу"
        }).html('<i class="fa fa-comment" aria-hidden="true"></i>').on("click", r)];
        if (t.content) {
            if (c.html(t.content.Question), t.content.Options && t.content.Options.Option) {
                ("length" in t.content.Options.Option ? t.content.Options.Option : [t.content.Options.Option]).forEach(a => {
                    s({
                        optionValue: a
                    })
                })
            }
            t.content.Comment && r({
                commentValue: t.content.Comment
            }), t.content.Answer && i({
                answer: t.content.Answer
            })
        }
        let p = $("<tr/>", {
            id: o.id,
            class: t.rowClass
        }).append([$("<td/>", {
            class: "nav-col"
        }).append(d), $("<td/>").append(l)]);
        return a.append(p), o.question = new Quill("#edit_" + o.id, {
            theme: "bubble",
            modules: {
                toolbar: e
            }
        }), o
    }
}